AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  EnvDBHost:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: /rails-lambda/DB_HOST
  EnvDBUser:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: /rails-lambda/DB_USER
  EnvDBPassword:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: /rails-lambda/DB_PASSWORD
  EnvRailsSecret:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: /rails-lambda/SECRET_KEY_BASE
  COGNITOCLIENTID:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: /self-service-lambda/COGNITO_CLIENT_ID
  COGNITOCLIENTSECRET:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: /self-service-lambda/COGNITO_CLIENT_SECRET
  COGNITOUSERPOOLSITE:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: /self-service-lambda/COGNITO_USER_POOL_SITE
  COGNITOUSERPOOLID:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: /self-service-lambda/COGNITO_USER_POOL_ID
  COGNITOAWSREGION:
    Type : String
    Default: 'eu-west-2'
  DBName: 
    Type: String
    Default: railslambdapg

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.30.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '172.30.4.0/24'
      AvailabilityZone: 'eu-west-2a'
      VpcId:
        Ref: VPC
      MapPublicIpOnLaunch: true
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '172.30.3.0/24'
      AvailabilityZone: 'eu-west-2a'
      VpcId:
        Ref: VPC
      MapPublicIpOnLaunch: true
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '172.30.0.0/24'
      AvailabilityZone: 'eu-west-2a'
      VpcId:
        Ref: VPC
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '172.30.1.0/24'
      AvailabilityZone: 'eu-west-2b'
      VpcId:
        Ref: VPC
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '172.30.2.0/24'
      AvailabilityZone: 'eu-west-2c'
      VpcId:
        Ref: VPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Join [_, [!Ref 'AWS::StackName']]
        - Key: Network
          Value: Public
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Network
          Value: Public
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  NatGateway:
    Type: "AWS::EC2::NatGateway"
    DependsOn: NatPublicIP
    Properties: 
      AllocationId: !GetAtt NatPublicIP.AllocationId
      SubnetId: !Ref PublicSubnetA
  NatPublicIP:
    Type: "AWS::EC2::EIP"
    DependsOn: VPC
    Properties:
      Domain: vpc
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Network
          Value: Private
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetCRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTable
  DBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
     GroupDescription: "Function Access"
     VpcId: 
       Ref: VPC
     SecurityGroupIngress:
       - IpProtocol : "tcp"
         FromPort: 5432
         ToPort: 5432
         CidrIp: "172.30.0.0/16"
  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "DB Private PrivateSubnet"
      SubnetIds: 
        - Ref: PrivateSubnetA
        - Ref: PrivateSubnetB
        - Ref: PrivateSubnetC
  SelfServiceDB:
    Type : "AWS::RDS::DBInstance"
    Properties:
      DBName: !Ref DBName
      AllocatedStorage: 5
      DBInstanceClass: db.t2.micro
      Engine: "postgres"
      MasterUsername: !Ref EnvDBUser
      MasterUserPassword: !Ref EnvDBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - "Fn::GetAtt": [ "DBSecurityGroup", "GroupId" ] 
  SelfServiceLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
  MigrationFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: SelfServiceMigrationFunction
      Handler: lambda.migration_handler
      Runtime: ruby2.5
      CodeUri: "./"
      MemorySize: 1024
      Timeout: 500
      Role: !GetAtt SelfServiceLambdaRole.Arn
      Environment:
        Variables:
          RAILS_LOG_TO_STDOUT: true
          RAILS_ENV: production
          BOOTSNAP_CACHE_DIR: '/tmp/.bootsnap/'
          DB_HOST: !GetAtt SelfServiceDB.Endpoint.Address
          DB_NAME: !Ref DBName
          DB_USER: !Ref  EnvDBUser
          DB_PASSWORD: !Ref EnvDBPassword
          SECRET_KEY_BASE: !Ref EnvRailsSecret
          SCHEMA: /tmp/schema.rb
      VpcConfig:
        SecurityGroupIds:
          - "Fn::GetAtt": [ "DBSecurityGroup", "GroupId" ] 
        SubnetIds: 
          - Ref: PrivateSubnetA
          - Ref: PrivateSubnetB
          - Ref: PrivateSubnetC
  RailsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: SelfServiceApp
      Handler: lambda.handler
      Runtime: ruby2.5
      CodeUri: "./"
      MemorySize: 1024
      Timeout: 500
      Role: !GetAtt SelfServiceLambdaRole.Arn
      Environment:
        Variables:
          RAILS_SERVE_STATIC_FILES: true
          RAILS_LOG_TO_STDOUT: true
          RAILS_ENV: production
          BOOTSNAP_CACHE_DIR: '/tmp/.bootsnap/'
          DB_HOST: !GetAtt SelfServiceDB.Endpoint.Address
          DB_NAME: !Ref DBName
          DB_USER: !Ref  EnvDBUser
          DB_PASSWORD: !Ref EnvDBPassword
          SECRET_KEY_BASE: !Ref EnvRailsSecret
          RAILS_RELATIVE_URL_ROOT: '/Prod'
          COGNITO_CLIENT_ID: !Ref COGNITOCLIENTID
          COGNITO_CLIENT_SECRET: !Ref COGNITOCLIENTSECRET
          COGNITO_USER_POOL_SITE: !Ref COGNITOUSERPOOLSITE
          COGNITO_USER_POOL_ID: !Ref COGNITOUSERPOOLID
          COGNITO_AWS_REGION: !Ref COGNITOAWSREGION
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt [ "DBSecurityGroup", "GroupId" ] 
        SubnetIds: 
          - Ref: PrivateSubnetA
          - Ref: PrivateSubnetB
          - Ref: PrivateSubnetC
  RailsAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: RailsAPI
      StageName: Prod
      DefinitionBody:
        swagger: '2.0'
        basePath: '/Prod'
        info:
          title: !Ref AWS::StackName
        paths:
          /{proxy+}:
            x-amazon-apigateway-any-method:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RailsFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: POST
                type: "aws_proxy"
          /:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RailsFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: POST
                type: "aws_proxy"
  ConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - RailsFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RailsFunction
      Principal: apigateway.amazonaws.com
Outputs:
  RailsAppUrl:
    Description: App endpoint URL
    Value: !Sub "https://${RailsAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod"
